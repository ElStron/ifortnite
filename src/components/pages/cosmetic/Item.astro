---
import Layout from '@/layouts/Layout.astro';
import ButtonPlayer from '@/components/ButtonPlayer';
import Vynil from '@/components/Vynil.astro';
import Link from '@/components/Link.astro';

interface Props {
    data:string[] | any;
}

const { data } = Astro.props;
const grants = data.grants
const image = data.displayAssets.length > 0 ? data.displayAssets[0].url : data.images.icon;

---
<Layout title={data.name}>
    <div class="w-full mx-auto relative gap-4" id="grid__container">
        <section class="max-w-[380px] w-full p-6 flex flex-col gap-3" id="details">
            <div id="info" class="flex gap-3 text-white items-center mb-4 uppercase text-md font-bold italic">
                <span class="px-3 py-1 rounded bg-cyan-800">{data.rarity.name}</span>
                <span>{data.type.name}</span>
            </div>
            <h1 class="text-2xl lg:text-5xl font-bold text-gray-900 dark:text-white "><i>{data.name}</i></h1>
            <p class="text-lg font-normal text-gray-500 dark:text-gray-400 py-4">{data.description}</p>
            {
                data.type.name === "Jam Track" && <ButtonPlayer track={data.name} client:load />
            }
            <p class="text-2xl font-bold text-gray-900 dark:text-white">{data.price}</p>
        </section>
        <section id="hero" class="w-full flex justify-between relative">
            {
                data.type.name !==  "Jam Track" ?
                <img id="item" src={image} alt={data.name} />
                : <Vynil img={image}/> 
            }
        </section>
        <section id="components" class="w-full flex flex-col gap-4 lg:pb-8 overflow-x-auto lg:overflow-x-visible relative">
            <h2 class="text-lg font-black text-gray-900 dark:text-white my-4 italic uppercase hidden lg:flex">
                Cosmetics
            </h2>
            <div class="flex flex-nowrap lg:flex-wrap gap-4 py-4 lg:py-0 pl-2 lg:pl-0">
                {
                    grants && grants.map((grant: any) => {
                        return (
                            <Link href={`/cosmetic/${grant.id}`} class="w-[100px] h-[100px] flex-none">
                                <img
                                    class="w-full h-full object-cover rounded-lg shadow-lg bg-[rgba(0,0,0,0.2)] cursor-pointer hover:scale-110 transition-all" 
                                    src={grant.images.icon}
                                    title={grant.name}
                                    width="100"
                                    height="100" 
                                    alt={grant.name}
                                    loading="lazy"  
                                />
                            </Link>
                        )
                    })
                }
            </div>
        </section>
    </div>
</Layout>

<style>
    #grid__container {
        display: grid;
        grid-template-areas: "a b" "c c";
        grid-template-columns: auto 1fr;
        grid-template-rows: 59svh auto;
    }
    #hero::before {
        content: "";
        position: absolute;
        width: 90%;
        height: 90%;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        border-radius: 50%;
        background-color: #00DBDE;
        background-image: linear-gradient(90deg, #00DBDE 0%, #FC00FF 100%);

        z-index: -1;
        filter: blur(170px);
    }
    #details {
        grid-area: a;
    }
    #hero {
        grid-area: b;
        width: 700px;
        height: 700px;
        max-height: 100%;
        max-width: 100%;
    }
    #components {
        grid-area: c;
        scrollbar-color: #f3f4f61a rgb(27 29 37 / 17%);
    }
    #item {
        width: 100%;
        height: 100%;
        object-fit: contain;
        object-position: top;
        -webkit-mask-image: linear-gradient(180deg, rgba(0, 0, 0, 1) 76%, rgba(0, 0, 0, 0) 100%);
        mask-image: linear-gradient(180deg, rgba(0, 0, 0, 1) 69%, rgba(0, 0, 0, 0) 100%);
    }
    @media screen and (max-width: 768px) {
        #grid__container {
            grid-template-areas: "b" "c" "a";
            grid-template-rows: auto auto auto;
        }
        #hero {
            width: 100%;
            height: 100%;
        }
        #item {
            -webkit-mask-image: linear-gradient(180deg, rgba(0, 0, 0, 1) 40%, rgba(0, 0, 0, 0) 100%);
        mask-image: linear-gradient(180deg, rgba(0, 0, 0, 1) 40%, rgba(0, 0, 0, 0) 100%);
        }
    }
</style>