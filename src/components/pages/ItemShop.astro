---
import Section from '@/components/Section.astro';
import Layout from '@/layouts/Layout.astro';
import type { Item } from '@/models/shop.type.ts';
import { getDailyShop, filterItemsBySection } from '@/services/dailyShop.ts'
import { getI18N } from "@/i18n"
const { currentLocale } = Astro
const i18n = getI18N({ currentLocale })


const data = await getDailyShop({ lang: currentLocale });
const sections = filterItemsBySection(data.shop);
---
<Layout title={i18n.SHOP.TITLE_SEO} description={i18n.SHOP.DESCRIPTION_SEO}>

  <section class="w-full mx-auto p-3 text-balance" id="hero">
    <h1 class="mb-2 text-xl font-extrabold text-gray-900 dark:text-white md:text-2xl lg:text-3xl" set:html={i18n.SHOP.TITLE}>
    </h1>
    <p class="text-[16px] font-normal text-gray-500 dark:text-gray-400 text-pretty">
      {i18n.SHOP.DESCRIPTION} <span class="font-bold">{data.lastUpdate.date}</span>
    </p>
  </section>

  <section class="w-full mx-auto custom-scrollbar">
    <div class="w-full p-6 flex flex-col gap-8 ">
      {
        sections && sections.map((section) => {
          const dataSection = section.items as Item[]
          return (
            <Section
              id={section.id} 
              shop={dataSection}
              name={section.name} 
            />
          )
        })
      }
    </div>
  </section>
</Layout>

<style is:inline>
  h1>strong {
    background: -webkit-linear-gradient(90deg, #00DBDE 0%, #FC00FF 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-color: #00DBDE;
    background-image: linear-gradient(90deg, #00DBDE 0%, #FC00FF 100%);

  }
    h2 {
    display: block;
    line-height: 1.5; 
    }
  
    article {
        view-timeline-name: --image;
        view-timeline-axis: block;
        animation-timeline: --image;
        animation-name: mymove;
        animation-range: entry 25% cover 55%;
        animation-fill-mode: both;
    }
    @keyframes mymove {
        0% {
            opacity: 0;
        }
        100% {
            opacity: 1;
        }
    }
</style>
<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const imgs = document.querySelectorAll('[data-imgs]');
    const imgExists = {};

    const randomImg = (images) => {
      const imagesArray = images.split(',');
      const img = imagesArray[Math.floor(Math.random() * imagesArray.length)];
      return img;
    }

    const updateImg = () => {
      imgs.forEach((img) => {
        const getImg = randomImg(img.getAttribute('data-imgs'));

        if (!imgExists[getImg]) {
          img.setAttribute('src', getImg);
          imgExists[getImg] = true;
        }
      });
    }

    setInterval(updateImg, 1000);
  });
</script>